#include <iostream>
#include <boost/filesystem/fstream.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/range/algorithm/for_each.hpp>
#include "babel.h"
#include "flobserver.h"

FLObserver::FLObserver() {
  string drive = getenv("HOMEDRIVE");
  string path = getenv("HOMEPATH");
  fs::path homePath = fs::path(drive + path);
  bool modern = (path.find("Documents and Settings") == string::npos);
  fs::path dataPath = (modern) ? homePath / "AppData" / "Roaming" :
                                 homePath / "Application Data";
  mmcfgPath = (homePath / "mm.cfg").normalize();
  trustcfgPath = (dataPath / "Macromedia" / "Flash Player" / "#Security" / "FlashPlayerTrust" / "FLConsole.cfg").normalize();
  logPath = (dataPath / "Macromedia" / "Flash Player" / "Logs" / "flashlog.txt").normalize();
  babel::init_babel();
}

FLObserver::~FLObserver() {
}

string FLObserver::GetMmcfgPath() {
  return mmcfgPath.string();
}

string FLObserver::GetTrustcfgPath() {
  return trustcfgPath.string();
}

string FLObserver::GetLogPath() {
  return logPath.string();
}

bool FLObserver::Init(JSCallback* onError, JSCallback* onChange, string url, string mmcfg) {
  jsOnError = onError;
  jsOnChange = onChange;

  bool generated = false;
  generated |= GenerateFile(mmcfgPath, mmcfg);
  generated |= GenerateFile(trustcfgPath, url);
  generated |= GenerateFile(logPath, "Generated by FLConsole");
  if (!generated) {
    Reset();
  }

  return generated;
}

bool FLObserver::GenerateFile(fs::path path, string text) {
  fs::path dir = path.parent_path();
  if (!fs::exists(dir)) {
    fs::create_directories(dir);
  }
  if (!fs::exists(path)) {
    fs::ofstream ofs(path);
    ofs << text << endl;
    ofs.close();
    return true;
  }
  return false;
}

void FLObserver::Reset() {
  uintmax_t lastFileSize = fs::file_size(logPath);

  lastRow = 0;
  fs::ifstream ifs(logPath);
  if (!ifs || ifs.fail()) {
    jsOnError->Run("Fail to open log file.");
    return;
  }
  string diff = "";
  string buf;
  while (getline(ifs, buf)) {
    lastRow++;
  }
  ifs.close();
}

void FLObserver::Tick() {
  uintmax_t fileSize = fs::file_size(logPath);
  if (fileSize == lastFileSize) {
    return;
  }
  
  fs::ifstream ifs(logPath);
  if (!ifs || ifs.fail()) {
    jsOnError->Run("Fail to open log file.");
    return;
  }
  string diff = "";
  string buf;
  unsigned int row = 0;
  while (getline(ifs, buf)) {
    row++;
    if (row > lastRow) {
      lastRow++;
      diff += (string)(babel::auto_translate<>(buf, babel::base_encoding::utf8)) + "\n";
    }
  }
  ifs.close();
  lastRow = row;
  if (diff.length() > 0) {
    diff.erase(diff.length() - 1);
    jsOnChange->Run(diff);
  }
}

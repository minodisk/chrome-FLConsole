#include <vector>
#include <iostream>
#include <boost/filesystem/fstream.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/range/algorithm/for_each.hpp>
#include "babel.h"
#include "flobserver.h"

FLObserver::FLObserver() {
  currentPath = fs::current_path();
  /*extensionPath = (currentPath / ".." / ".." /
    "User Data" / "Default" / "Extensions").normalize();*/
  userPath = (currentPath / ".." / ".." / ".." / ".." / ".." / "..").normalize();
  mmcfgPath = (userPath / "mm.cfg").normalize();
  trustcfgPath = (userPath / "Application Data" / "Macromedia" / "Flash Player" /
    "#Security" / "FlashPlayerTrust" / "FLConsole.cfg").normalize();
  logPath = (userPath / "Application Data" / "Macromedia" / "Flash Player" /
    "Logs" / "flashlog.txt").normalize();
  babel::init_babel();
}

FLObserver::~FLObserver() {
}

string FLObserver::GetMmcfgPath() {
  return mmcfgPath.string();
}

string FLObserver::GetTrustcfgPath() {
  return trustcfgPath.string();
}

string FLObserver::GetLogPath() {
  return logPath.string();
}

bool FLObserver::Init(JSCallback* onError, JSCallback* onChange, string url, string mmcfg) {
  jsOnError = onError;
  jsOnChange = onChange;
  //extensionPath /= id;
  
  vector<string> msgs;
  if (WriteFile(mmcfgPath, mmcfg)) {
    msgs.push_back(mmcfgPath.string());
  }
  if (WriteFile(trustcfgPath, url)) {
    msgs.push_back(trustcfgPath.string());
  }
  if (WriteFile(logPath, "Generated by FLConsole")) {
    msgs.push_back(logPath.string());
  }
  int size = msgs.size();
  if (size != 0) {
    string msg = "Restart Chrome, FLConsole generate these files.\n";
    for (int i = 0; i < size; i++) {
      msg += "*" + msgs[i] + "\n";
    }
    msg.erase(msg.length() - 1);
    jsOnError->Run(msg);
    return false;
  }

  Reset();
  return true;
}

bool FLObserver::WriteFile(fs::path path, string text) {
  if (!fs::exists(path)) {
    fs::ofstream ofs(path, ios::out | ios::app);
    ofs << text << endl;
    ofs.close();
    return true;
  }
  return false;
}

void FLObserver::Reset() {
  uintmax_t lastFileSize = fs::file_size(logPath);

  lastRow = 0;
  fs::ifstream ifs(logPath);
  if (!ifs || ifs.fail()) {
    jsOnError->Run("Fail to open log file.");
    return;
  }
  string diff = "";
  string buf;
  while (getline(ifs, buf)) {
    lastRow++;
  }
  ifs.close();
}

void FLObserver::Tick() {
  uintmax_t fileSize = fs::file_size(logPath);
  if (fileSize == lastFileSize) {
    return;
  }
  
  fs::ifstream ifs(logPath);
  if (!ifs || ifs.fail()) {
    jsOnError->Run("Fail to open log file.");
    return;
  }
  string diff = "";
  string buf;
  unsigned int row = 0;
  while (getline(ifs, buf)) {
    row++;
    if (row > lastRow) {
      lastRow++;
      diff += (string)(babel::auto_translate<>(buf, babel::base_encoding::utf8)) + "\n";
    }
  }
  ifs.close();
  lastRow = row;
  if (diff.length() > 0) {
    diff.erase(diff.length() - 1);
    jsOnChange->Run(diff);
  }
}
